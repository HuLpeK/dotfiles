#!/bin/bash

set -euo pipefail

# Determine the OS
OS="$(uname -s)"

# Function to install build dependencies
install_dependencies() {
  echo "Installing dependencies for $OS..."

  if [[ "$OS" == "Linux" ]]; then
    # For Linux
    if command -v apt &>/dev/null; then
      sudo apt update && sudo apt install -y \
        ninja-build gettext cmake unzip curl tar git build-essential gettext
    elif command -v dnf &>/dev/null; then
      sudo dnf install -y \
        ninja-build gettext cmake unzip curl tar git gcc gcc-c++ make
    elif command -v pacman &>/dev/null; then
      sudo pacman -S --noconfirm \
        ninja gettext cmake unzip curl tar git base-devel
    else
      echo "Unsupported package manager. Install dependencies manually." >&2
      exit 1
    fi

  elif [[ "$OS" == "Darwin" ]]; then
    # For macOS
    if ! command -v brew &>/dev/null; then
      echo "Homebrew not found. Installing Homebrew..."
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    brew install ninja libtool automake cmake pkg-config gettext curl
  else
    echo "Unsupported OS: $OS" >&2
    exit 1
  fi

  echo "Dependencies installed successfully."
}

# Function to build and install Neovim
build_and_install_nvim() {
  echo "Building Neovim from source..."

  # Clone the repository if it doesn't already exist
  if [[ ! -d "$HOME/neovim" ]]; then
    git clone https://github.com/neovim/neovim.git "$HOME/neovim"
  else
    echo "Updating existing Neovim source..."
    git -C "$HOME/neovim" pull
  fi

  # Navigate to the source directory and build Neovim
  cd "$HOME/neovim"
  mkdir -p ./build
  cd ./build

  cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_JEMALLOC=ON

  # Install Neovim
  sudo ninja install 

  echo "Neovim built and installed successfully."
}

# Run the functions
install_dependencies
build_and_install_nvim

